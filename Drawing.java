//Importing the libraries needed
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.util.*;
import java.awt.font.*;
import java.io.*;
import java.net.*;

@SuppressWarnings("serial") //Ignore useless warnings generated by the compiler

public class Drawing extends JFrame {

	Graphics2D grapSet;
	Color pickColor   = Color.BLACK;
	boolean fillShape = false;
	Buttons buttons = new Buttons();
	String selectedFont, selectedSize;
	ArrayList<Shapes> shapes = new ArrayList<Shapes>();
	
	public static void main(String[] args) {
		
		//This application was written using Eclipse for OS X
		//It might add some funny characters to the println function on windows
		//sorry about that
		System.out.println( "­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­---------------------------------------" ); 
		System.out.println( " 159.235 Assignment 1, Semester 2 2015 " ); 
		System.out.println( " Submitted by: Jumaah, Bilal, 12232659 " );
		System.out.println( "              Jackson, Jonny, 14089365 " );
		System.out.println( "             Creevey, Andrew, 12236284 " );
		System.out.println( "­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­---------------------------------------" );
		
		new Drawing();
	}
	
	public Drawing() { 				//the program constructor
		super("Drawing");			//the sets the 
		this.setSize(800, 600);		//default window size
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(true);	//makes the window resizeable
		
		MyMenuBar menu = new MyMenuBar();	//add menu bar to the window
		this.setJMenuBar(menu);				
		
		this.add(buttons.panel, BorderLayout.WEST);			//positioning the buttons panel
		this.add(new DrawingArea(), BorderLayout.CENTER);	//positioning the drawing board
		this.setVisible(true);								//sets jframe visible
	}
	//The start of the menu bar class
     public class MyMenuBar extends JMenuBar implements ActionListener {
    
    	private JMenu menu, help;
    	private JMenuItem exit, about, tut, screen;
    	
    	 MyMenuBar() { //constructor
    		menu = new JMenu("Application");
    		exit = new JMenuItem("Exit");
    		
    		screen = new JMenuItem("Screenshot");
    		
    		help = new JMenu("Help");
    		about = new JMenuItem("About");
    		tut = new JMenuItem("Java tutorial");

    		this.add(menu);
    		this.add(help);
    		
    		menu.add(screen);
    		menu.add(exit);
          
    		help.add(about);
    		help.add(tut); 
            
    		exit.addActionListener(this);
    		screen.addActionListener(this);
            about.addActionListener(this);
            tut.addActionListener(this); 
    	}
    	 //action listener implementation via action preformed function
		public void actionPerformed(ActionEvent e) {
			if(e.getSource() == exit) { //if the user choose exit
				System.out.println("Drawing application exiting..");
				System.exit(0);
			}
			else if(e.getSource() == screen) { //this was made to save a screenshot of the program as an image
				Container c = getContentPane();
				BufferedImage im = new BufferedImage(c.getWidth() , c.getHeight(), BufferedImage.TYPE_INT_ARGB);
				c.paint(im.getGraphics());
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setSelectedFile(new File("screenshot.png"));
				if (fileChooser.showSaveDialog(c) == JFileChooser.APPROVE_OPTION) {
				  File f = fileChooser.getSelectedFile();
				  try {
					  ImageIO.write(im, "PNG", f);
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				} // the screen shot code above was derived from the link below by Alberto:
				//http://stackoverflow.com/questions/11272938/how-to-save-panel-as-image-in-swing	
			}
			else if(e.getSource() == about) {
				JOptionPane.showMessageDialog(null,"This application was written by:\n Bilal Jumaah.\n"
            	+ " Jonny Jackson.\n Andrew Creevey.");
			}
			else if(e.getSource() == tut) {
				String url ="https://www.youtube.com/watch?v=dQw4w9WgXcQ"; 
				String url2 = "http://lmgtfy.com/?q=how+2+java";
            	try {
					Desktop.getDesktop().browse(URI.create(url));
					Desktop.getDesktop().browse(URI.create(url2));
				}
            	catch (IOException x) {
					JOptionPane.showMessageDialog(null,"Error opening webpage"); //Catch error message.
					x.printStackTrace();
				}
			}
		}
    }
    //the start off the the buttons class
	public class Buttons implements ActionListener {
		
		private JPanel panel = new JPanel();
		private JToggleButton rectBut, sqBut, lineBut, circBut, ellBut, txtBut, colorBut;
		private JButton clear;
		
		Buttons() {				//constructor
			rectBut  =  mkBut("./src/rectangle.png");
			sqBut    =  mkBut("./src/square.png");
			lineBut  =  mkBut("./src/line.png");
			circBut  =  mkBut("./src/circle.png");
			ellBut   =  mkBut("./src/ellipse.png");
			txtBut   =  mkBut("./src/letter.png");
			colorBut =  mkBut("./src/colors.jpg");
			
			clear = new JButton("Clear");
			clear.addActionListener(this);
			//add the buttons to a panel
			panel.add(rectBut);
			panel.add(sqBut);
			panel.add(lineBut);
			panel.add(circBut);
			panel.add(ellBut);
			panel.add(txtBut);
			panel.add(colorBut);
			panel.add(new CheckBox());
			panel.add(clear);
			
			panel.setPreferredSize(new Dimension(130, 1)); //sets the dimensions of the panel
			panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));	//positioning of the panel
		}

		private JToggleButton mkBut(String butIconSrc) { //buttons maker that sets all the buttons
			JToggleButton but = new JToggleButton(); 
			Icon butIcon = new ImageIcon(butIconSrc);
			but.setIcon(butIcon);
			but.addActionListener(this);
			return but;
		}
		
		public void actionPerformed(ActionEvent e) { //action listener that implements
			if (e.getSource() == clear) {
				shapes.clear();						//clears the shapes array
				repaint();							//refresh
			}
			else if(e.getSource() == colorBut) { 	//colors selection
				pickColor = JColorChooser.showDialog(null, "Pick a color", Color.BLACK);
				colorBut.setSelected(false);
			}
			else {
				//toggle the buttons to prevent errors
				if(e.getSource() == rectBut) {
					lineBut.setSelected(false);
					sqBut.setSelected(false);
					circBut.setSelected(false);
					ellBut.setSelected(false);
					txtBut.setSelected(false);
				}
				else if(e.getSource() == lineBut) {
					sqBut.setSelected(false);
					rectBut.setSelected(false);
					circBut.setSelected(false);
					ellBut.setSelected(false);
					txtBut.setSelected(false);
				}
				else if(e.getSource() == circBut) {
					sqBut.setSelected(false);
					rectBut.setSelected(false);
					lineBut.setSelected(false);
					ellBut.setSelected(false);
					txtBut.setSelected(false);
				}
				else if(e.getSource() == ellBut) {
					sqBut.setSelected(false);
					lineBut.setSelected(false);
					circBut.setSelected(false);
					rectBut.setSelected(false);
					txtBut.setSelected(false);
				}
				else if(e.getSource() == txtBut) {
					sqBut.setSelected(false);
					lineBut.setSelected(false);
					circBut.setSelected(false);
					rectBut.setSelected(false);
					ellBut.setSelected(false);
				}
				else if(e.getSource() == sqBut) {
					txtBut.setSelected(false);
					lineBut.setSelected(false);
					circBut.setSelected(false);
					rectBut.setSelected(false);
					ellBut.setSelected(false);
				}
			}
		}
	}
	//the start of the shapes class
	public class Shapes {
		//here each shape and its feature are getting created
		private Color myColor;
		private Shape myShape;
		private Boolean isFilled;
		
		Shapes(Shape shape, Color color, Boolean isFill) {
			myShape = shape;
			myColor = color;
			isFilled = isFill;
		}

		public Shape getMyShape() {
			return myShape;
		}

		public void setMyShape(Shape myShape) {
			this.myShape = myShape;
		}
		
		public Color getMyColor() {
			return myColor;
		}

		public void setMyColor(Color myColor) {
			this.myColor = myColor;
		}

		public Boolean getIsFilled() {
			return isFilled;
		}

		public void setIsFilled(Boolean isFilled) {
			this.isFilled = isFilled;
		}
	}
	//checkbox class starts here, its for the to fill the shapes
	class CheckBox extends JPanel implements ItemListener {
		// this was derived from the lecture slides by Arno Leist
	    private JCheckBox fill;
	    
	    public CheckBox() {
	        fill = new JCheckBox("Fill");
	        fill.addItemListener(this);
	        this.add(fill);
	    }

	    public void itemStateChanged(ItemEvent e) {
	        Object source = e.getItemSelectable();

	        String item = null;
	        if (source == fill) {
	            item = "Fill";
	        } 

	        if (e.getStateChange() == ItemEvent.SELECTED) {
	            System.out.println("Selected " + item);
	            fillShape = true;
	        } 
	        else if (e.getStateChange() == ItemEvent.DESELECTED) {
	            System.out.println("De-selected " + item);
	            fillShape = false;
	        }
	    }
	}
	//the dropdowns inside the text input window class starts here
	public class DropDown extends JPanel implements ActionListener {
		private String[] fonts = { //an array holds the fonts
				"Arial", "Arial Black",
				"Century", "Comic Sans MS", "Courier",
				"Courier New", "Goudy Old Style",
				"Haettenschweiler", "Handwriting - Dakota",
				"Helvetica", "Impact", "MS Gothic", "Serif",
				"Tahoma", "Times", "Times New Roman"
		};
		private String[] size = { //an array holds the size of the text
				"6", "8", "12", "24", "36", "48", "60", "72"
		};
		
		private JComboBox<String> fontsList, sizeList; 
		
		public DropDown() { //constructor
			fontsList = new JComboBox<>(fonts);
			fontsList.setSelectedIndex(0);
			selectedFont = fontsList.getSelectedItem().toString();
			fontsList.addActionListener(this);
			this.add(fontsList);
			
			sizeList = new JComboBox<>(size);
			sizeList.setSelectedIndex(3);
			selectedSize = sizeList.getSelectedItem().toString();
			sizeList.addActionListener(this);
			this.add(sizeList);
		}
		
		public void actionPerformed(ActionEvent e) { //action listener implementation
			selectedFont = fontsList.getSelectedItem().toString();
			selectedSize = sizeList.getSelectedItem().toString();
		}
	}
	//drawing area class starts here
	public class DrawingArea extends JComponent {

		Point drawStart, drawEnd;
		Shapes object = null;
		Shape obj = null;
		
		public DrawingArea() {
			
			this.addMouseListener(new MouseActions()); //tracks the mouse on the drawing area to make the shapes
			this.addMouseMotionListener(new MouseMotionActions()); //traks the mouse on the drawing area to make the guideline
		}
		
		class MouseMotionActions extends MouseMotionAdapter {
			public void mouseDragged(MouseEvent e) {
				drawEnd = new Point(e.getX(), e.getY());
				repaint();
			}
		}
		
		class MouseActions extends MouseAdapter {
			public void mousePressed(MouseEvent e) {
					drawStart = new Point(e.getX(), e.getY());
					drawEnd = drawStart;
					repaint();
				}
				
			public void mouseReleased(MouseEvent e) {
				if(buttons.rectBut.isSelected() || buttons.sqBut.isSelected() || buttons.lineBut.isSelected() || buttons.circBut.isSelected() || buttons.ellBut.isSelected() || buttons.txtBut.isSelected()) {
					mkShape(true, drawStart.x, drawStart.y, e.getX(), e.getY()); //function to make the shapes
				}
				else {
					System.out.println("Error: Tool not selected!"); //error handling if no tool selected
					return;
				}
				shapes.add(object); //adding the objects/shapes to the array
				drawStart = null;
				drawEnd = null;
				repaint();
			}
		}
		
		public void paint(Graphics g) {
			
			super.paint(g);
			grapSet = (Graphics2D)g.create();
			grapSet.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
	
			if(!shapes.isEmpty()) {
				for (Shapes s : shapes) {
					grapSet.setPaint(s.getMyColor());
					grapSet.draw(s.getMyShape());	//draw the array of shapes onto the screen
					if(s.getIsFilled()) {
						grapSet.fill(s.getMyShape());	//check if the fill checkbox ticked then make that shape filled
					}
				}
			}
				
			if(drawStart != null && drawEnd != null) {
				grapSet.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.40f));
				grapSet.setPaint(Color.GRAY);
				
				if(buttons.rectBut.isSelected() || buttons.sqBut.isSelected() || buttons.lineBut.isSelected() || buttons.circBut.isSelected() || buttons.ellBut.isSelected()) {
					mkShape(false, drawStart.x, drawStart.y, drawEnd.x, drawEnd.y);	//make the shape guide on the screen
				} 
				
				else {
					return; //error handling
				}
				
				grapSet.draw(obj);
				if(fillShape==true) {
					grapSet.fill(obj); //fill the guide if the fill checkbox ticked
				}
			}
		}
	
		protected void paintComponent(Graphics g) {  //function to make the drawing area background white
	        super.paintComponent(g);				 //this function was written by: Enwired from
	        Graphics2D g2 = (Graphics2D)g.create();	 //http://stackoverflow.com/questions/11157664/how-to-make-background-work-in-custom-jcomponent
	        g2.setColor(Color.WHITE);
	        g2.fillRect(0, 0, getWidth(), getHeight());
	        g2.setColor(Color.WHITE);
	        g2.draw(new Rectangle2D.Float());
	    }
		//start of make shapes function
		private void mkShape(boolean draw, int x1, int y1, int x2, int y2) {	
			int x = Math.min(x1, x2);
			int y = Math.min(y1, y2);
			
			int width = Math.abs(x1-x2);
			int height = Math.abs(y1-y2);
			
			int h = height * height;
			int w = width * width;
			
			double dim = Math.sqrt(h + w);
			
			if(draw == true) { //drawing the actual shapes
				if(buttons.rectBut.isSelected()) {
					object =  new Shapes(new Rectangle2D.Float(x, y, width, height), pickColor, fillShape);
				}
				else if(buttons.sqBut.isSelected()) {
					object =  new Shapes(new Rectangle2D.Float(x, y, (float)dim, (float)dim), pickColor, fillShape);
				}
				else if(buttons.lineBut.isSelected()) {
					object =  new Shapes(new Line2D.Float(x1, y1, x2, y2), pickColor, fillShape);
				}
				else if(buttons.circBut.isSelected()) {
					object =  new Shapes(new Ellipse2D.Float(x, y, (float)dim, (float)dim), pickColor, fillShape);
				}
				else if(buttons.ellBut.isSelected()) {
					object =  new Shapes(new Ellipse2D.Float(x, y, width, height), pickColor, fillShape);
				
				}
				else if(buttons.txtBut.isSelected()) { //getting the input text
					String txtInput;					//converting it into a shape using vector glyph
					txtInput = JOptionPane.showInputDialog(null, new DropDown(), "Type here:", JOptionPane.QUESTION_MESSAGE);
					if (txtInput == null || txtInput.isEmpty()) {
						txtInput = " ";
					}
					int fontSize = Integer.parseInt(selectedSize);
					Font f = new Font(selectedFont, Font.PLAIN, fontSize);
					GlyphVector v = f.createGlyphVector(getFontMetrics(f).getFontRenderContext(), txtInput);
					object = new Shapes(v.getOutline(x, y), pickColor, fillShape); 
				}						//this function was derived from code example 12
										//http://www.programcreek.com/java-api-examples/index.php?api=java.awt.font.GlyphVector
										//http://stackoverflow.com/questions/2466233/java-swing-converting-a-text-string-to-a-shape
				return;
			}
		
			else if(draw == false) {  //drawing the guidlines
				if(buttons.rectBut.isSelected()) {
					obj =  new Rectangle2D.Float(x, y, width, height);
				}
				else if(buttons.sqBut.isSelected()) {
					obj =  new Rectangle2D.Float(x, y, (float)dim, (float)dim);
				}
				else if(buttons.lineBut.isSelected()) {
					obj =  new Line2D.Float(x1, y1, x2, y2);
				}
				else if(buttons.circBut.isSelected()) {
					obj =  new Ellipse2D.Float(x, y, (float)dim, (float)dim);
				}
				else if(buttons.ellBut.isSelected()) {
					obj =  new Ellipse2D.Float(x, y, width, height);
				}
			}
		}
	}
}

//we research many things on the internet to make this program happen. however we didnt copy any piece of code directly
//other than the ones we have referenced. we just looked at example of code and explaining about codes. not sure if we need to literally
//reference every single piece we googled how its done. so you might find some similar concept but the code was written by us
//even some of the referenced code was also part of research not straight copy paste.

//also, we emailed you about being a team of 3 on this assignment, thats you found 3 names.